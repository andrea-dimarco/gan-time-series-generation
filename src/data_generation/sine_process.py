'''
This script simulates a multivariate process generated by the sine function
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from os import system

def sine_data_generation(p, N, seq_len):
    '''
    Sine data generation.
  
    Args:
        - `p`: feature dimensions
        - `N`: the number of sequences
        - `seq_len`: length of a sequence
    
    Returns:
        - generated data
    '''  
    assert(p>=2)
    # Initialize the output
    data = list()

    # Generate sine data
    for i in range(N):      
        # Initialize each time-series
        temp = list()
        # For each feature
        for k in range(p):
            # Randomly drawn frequency and phase
            freq = np.random.uniform(0, 0.1)            
            phase = np.random.uniform(0, 0.1)
          
            # Generate sine signal based on the drawn frequency and phase
            temp_data = [np.sin(freq * j + phase) for j in range(seq_len)] 
            temp.append(temp_data)
        
        # Align row/column
        temp = np.transpose(np.asarray(temp))        
        # Normalize to [0,1]
        temp = (temp + 1)*0.5
        # Stack the generated data
        data.append(temp)
                
    return np.array(data)


def plot_process(samples, save_picture=False, show_plot=True):
    '''
    Plots all the dimensions of the provided dataset.

    Arguments:
        - `samples`: 2D matrix with the data stream, dimensions are (num_samples, sample_size)
        - `save_picture`: if to save the picture of the graph or not
        - `show_plot`: if to display the plot or not
    '''
    if save_picture or show_plot:
        for i in range(samples.shape[1]):
            plt.plot(samples[:,i])

        # naming the x axis 
        plt.xlabel('time step') 
        # naming the y axis 
        plt.ylabel('Zt')
        # giving a title to my graph 
        plt.title("Wiener Process plot")
        
        # function to show the plot 
        if save_picture:
            plt.savefig("{title}-plot.png".format(title="wiener"))
        if show_plot:
            plt.show()


def save_sine_process(p=100, N=1000, file_path="./generated_stream.csv"):
    '''
    Generate and save the sine process data stream into a csv file.

    Arguments:
        - `p`: dimension of a single sample
        - `N`: number of samples to take
        - `file_path`: path of the csv file where to save the stream
    '''
    # Generate stream
    samples = sine_data_generation(p=p, N=N, seq_len=1).squeeze()

    # Save it
    df = pd.DataFrame(samples)
    df.to_csv(file_path, index=False, header=False)


def get_sine_process(p=100, N=1000):
    '''
    Generate and return the sine process data without dividing it into sequences.

    Arguments:
        - `p`: dimension of a single sample
        - `N`: number of samples to take

    Returns:
        Numpy array with the dimension (N,p)
    '''
    return sine_data_generation(p=p, N=N, seq_len=1).squeeze()